
python manage.py makemigrations
python manage.py migrate
python3 manage.py createsuperuser
python3 manage.py runserver

from tellings.models import UserPost, Tag, Tagmap

# get a list of all values in a field (without flat=True creates tuples for each value)
tags = list(Tag.objects.values_list('tagName', flat=True))
---------------------------------------------------------------------------------------
# alphabetical dict of tags
from collections import defaultdict

tagList = list(Tag.objects.values_list('tagName', flat=True))
result = defaultdict(list)
tagsToAdd = [(name[0].lower(), name) for name in tagList]
for tag in tagsToAdd:
    result[tag[0]].append(tag[1])

resultKeys = sorted(list(result.keys()))

---------------------------------------------------------------------------------------
# get a list of all posts
posts = UserPost.objects.all().order_by('-dateOfPost')
postList = [[post.postID, post.dateOfPost.strftime("%d %B %Y"), 
             post.user.username, post.postTitle, post.postText] for post in posts]
---------------------------------------------------------------------------------------
# get all posts by userID

def getByUserID(userID):
    posts = UserPost.objects.all().filter(user=userID).order_by('-dateOfPost')
	postList = [[post.postID, post.dateOfPost.strftime("%d %B %Y"), post.user.username, post.postTitle, post.postText] for post in posts]
	return postList
---------------------------------------------------------------------------------------
# post title exists

def postTitleExists(in_postTitle):
    posts = UserPost.objects.all().filter(postTitle=in_postTitle)
    return len(posts) > 0
----------------------------------------------------------------------------------------
#user has posted today

def userHasPostedToday(in_userID):
    yesterday = date.today() - timedelta(1)
    posts = UserPost.objects.all().filter(user=in_userID).filter(dateOfPost__gt=yesterday)
    return len(posts) > 0

----------------------------------------------------------------------------------------
# get tagnames by postID
def getTagNamesByPostID(in_postID):
    tagmaps = Tagmap.objects.all().filter(postID=in_postID)
	tagList = sorted([tag.tagID.tagName for tag in tagmaps])
	return tagList

